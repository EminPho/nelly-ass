# -*- coding: utf-8 -*-

import config
import user_config
import content

import os
import sqlite3
import telebot
from telebot import types

bot = telebot.TeleBot(config.token_main)

#FUNCTION ZONE

def help (message):
    bot.send_message(message.chat.id, content.help)

def main_markup (message):
    main_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    but11 = types.KeyboardButton("üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    but12 = types.KeyboardButton("üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    but13 = types.KeyboardButton("‚öôÔ∏è –°–≤—è–∑—å")
    but21 = types.KeyboardButton("üìå 1")
    but22 = types.KeyboardButton("üìå 2")
    but23 = types.KeyboardButton("üìå 3")
    but24 = types.KeyboardButton("üìå 4")
    but25 = types.KeyboardButton("üìå 5")
    but26 = types.KeyboardButton("üîí 6")
    but27 = types.KeyboardButton("üîí 7")
    but28 = types.KeyboardButton("üîí 8")
    but29 = types.KeyboardButton("üéÅ")
    but31 = types.KeyboardButton("üìö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    but32 = types.KeyboardButton("üìñ –û—Ç–∑—ã–≤—ã")
    main_markup.row(but11, but12, but13)
    main_markup.row(but21, but22, but23, but24, but25, but26, but27, but28, but29)
    main_markup.row(but31, but32)
    sticker = open (content.sticker_funny, 'rb')
    bot.send_sticker (message.chat.id, sticker, reply_markup=main_markup)

#HANDLER ZONE

@bot.message_handler(commands=['start', 'help', 'admin'])
def handler_commands (message):
    try:
        db = sqlite3.connect('nelly_v-ass.db')
        cursor = db.cursor()
        cursor.execute('SELECT * FROM user WHERE login = ?', (message.chat.username,))
        access = cursor.fetchone()
        if message.text == '/start':
            if access is None:
                cursor.execute("""INSERT INTO user VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                (message.chat.id, message.chat.username, message.chat.first_name, 0, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000))
                bot.send_message(message.chat.id, "–í—ã –≤–ø–µ—Ä–≤—ã–µ –∑–∞—à–ª–∏! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É –Ω–∞–ø–∏—à–∏—Ç–µ @nelly_white")
            elif access[3] > 0:
                main_markup (message)
                markup_type=types.InlineKeyboardMarkup()
                hello_stick = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —á–∞—Ç", url='https://t.me/joinchat/Wj-K4YgwOog1NTQ6')
                markup_type.row(hello_stick)
                bot.send_message(message.chat.id, content.hello, reply_markup=markup_type)
            else:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞! –ù–∞–ø–∏—à–∏—Ç–µ @nelly_white")
        elif message.text == '/help':
            help (message)
        elif message.text == '/admin':
            if access[3] == 2:
                admin_markup = types.InlineKeyboardMarkup()
                admin_message = types.InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ", callback_data='admin_message')
                admin_users = types.InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data='admin_users')
                bot_restart = types.InlineKeyboardButton("üî¥ BIG RED BUTTON üî¥", callback_data='bot_restart')
                admin_markup.row(admin_message, admin_users)
                admin_markup.row(bot_restart)
                bot.send_message(message.chat.id, "–í—ã –≤–æ—à–ª–∏ –≤ –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å.", reply_markup = admin_markup)
            else:
                bot.send_message(message.chat.id, '–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Emin_Pho')
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    except Exception as warring:
        bot.send_message(517561825, message.chat.username + ' call EXCEPT handler_warring: ' + str(warring))
    else:
        pass
    finally:
        bot.send_message(517561825, message.chat.username + ' call COMMAND: ' + message.text)
        db.commit()



@bot.message_handler(content_types=["document", "photo"])
def handler_file(message):
    try:
        user = eval('user_config.'+message.chat.username+'.get')
        if message.content_type == 'photo':
            file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            src =   user_config.hand_over.get('folder') + message.chat.username +'/lesson_'+user('log')+'/' + user_config.hand_over.get('handover') + '/'+ file_info.file_path
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)
        elif message.content_type == 'document':
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            src =  user_config.hand_over.get('folder') + message.chat.username + '/lesson_'+user('log')+'/' + user_config.hand_over.get('handover') + '/' + file_info.file_path
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)
        else:
            pass
        bot.send_message(message.chat.id, "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
    except Exception as warring:
        bot.send_message(517561825, warring)
    else:
        bot.send_message(392874912, message.chat.username + ' –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª—ã –≤ —É—Ä–æ–∫ ‚Ññ' + str(user('log')))
    finally:
        bot.send_message(517561825, message.chat.username + ' –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª—ã –≤ —É—Ä–æ–∫ ‚Ññ' + str(user('log')))



@bot.message_handler(content_types=["text"])
def handler_text(message):
    try:
        if message.text == 'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            bot.send_message(message.chat.id, content.datatable)
        elif message.text == 'üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            bot.send_message(message.chat.id, content.melted)
            file_description = open(content.info, 'rb')
            bot.send_document(message.chat.id, file_description)
        elif message.text == '‚öôÔ∏è –°–≤—è–∑—å':
            help (message)
        elif message.text == 'üìö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            store = user_config.score.get(str(message.chat.username))
            text = "–ë–∞–ª–ª—ã: {}\n–ú–µ—Å—Ç–æ –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ: {}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –Ω–∞ –∫—É—Ä—Å–µ: {}\n\n–ü—Ä–∏–Ω—è—Ç–æ –î–ó: {}\n–ü—Ä–∏–Ω—è—Ç–æ –ö–ó: {}\n–ü—Ä–∏–Ω—è—Ç–æ —Ç–µ—Å—Ç–æ–≤: {}\n".format(store.get('point'),store.get('place'),user_config.hand_over.get('max_point'),store.get('homework_done'),store.get('creativework_done'),store.get('test_done'))
            bot.send_message(message.chat.id, text)
        elif message.text == 'üìñ –û—Ç–∑—ã–≤—ã':
            bot.send_message(message.chat.id, content.feedback)
        elif message.text in ('üîí 1', 'üîí 2', 'üîí 3', 'üîí 4', 'üîí 5', 'üîí 6', 'üîí 7', 'üîí 8'):
            bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–∫!')
        elif message.text in ('üéÅ',):
            bot.send_message(message.chat.id, content.the_end)
        elif message.text in ('üìå 1', 'üìå 2', 'üìå 3', 'üìå 4', 'üìå 5', 'üìå 6', 'üìå 7', 'üìå 8'): # –≤—ã–∑–æ–≤ –ª—é–±–æ–≥–æ —É—Ä–æ–∫–∞
            if message.text == 'üìå 1': lesson = content.lesson_1.get
            if message.text == 'üìå 2': lesson = content.lesson_2.get
            if message.text == 'üìå 3': lesson = content.lesson_3.get
            if message.text == 'üìå 4': lesson = content.lesson_4.get
            if message.text == 'üìå 5': lesson = content.lesson_5.get
            if message.text == 'üìå 6': lesson = content.lesson_6.get
            if message.text == 'üìå 7': lesson = content.lesson_7.get
            if message.text == 'üìå 8': lesson = content.lesson_8.get




            log = eval("user_config." + message.chat.username)
            log.update({'log': str(message.text[2])})






            if lesson ('access') == 0: # –£—Ä–æ–∫ –∑–∞–∫—Ä—ã—Ç
                markup_timetable = types.InlineKeyboardMarkup()
                button_timetable = types.InlineKeyboardButton("–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='timetable')
                markup_timetable.row(button_timetable)
                bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–∫!')
            elif lesson ('access') == 1: # –£—Ä–æ–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è
                markup_future_lessons = types.InlineKeyboardMarkup()
                button__future_lessons = types.InlineKeyboardButton(content.date_zoom, url=content.url_zoom)
                markup_future_lessons.row(button__future_lessons)
                bot.send_message(message.chat.id, lesson('topic'), reply_markup=markup_future_lessons)
            elif lesson ('access') == 2: # –£—Ä–æ–∫ –ø—Ä–æ—à–µ–ª
                main_markup(message)
                markup_lessons=types.InlineKeyboardMarkup()
                url_lesson = types.InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–∫", url=lesson('url_lesson')) #–¢–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–∏–ª –∏ —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                test = types.InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –¢–µ—Å—Ç", url=lesson('test'))
                conspect = types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç", callback_data='conspect'+message.text) #–¢–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–∏–ª –∏ —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                homework = types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –î–ó", callback_data='homework'+message.text) #–¢–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–∏–ª –∏ —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                creativework = types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ö–î–ó", callback_data='creativework'+message.text) #–¢–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–∏–ª –∏ —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                hand_over_work = types.InlineKeyboardButton("–°–¥–∞—Ç—å –î–ó/–ö–ó", callback_data='hand_over_work')
                markup_lessons.row(url_lesson, conspect)
                markup_lessons.row(homework, creativework, test)
                markup_lessons.row(hand_over_work)
                bot.send_message(message.chat.id, lesson('topic'), reply_markup=markup_lessons)
        else:
            db = sqlite3.connect('nelly_v-ass.db')
            cursor = db.cursor()
            cursor.execute('SELECT * FROM user WHERE id = ?', (message.chat.id,))
            access = cursor.fetchone()
            db.commit()
            if access[3] == 2:
                content.admin_sent_message = message.text
                bot.send_message(message.chat.id, '...—Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ...')
    except Exception as warring:
        bot.send_message(517561825, message.chat.username + ' call EXCEPT handler_text: ' + str(warring))
    else:
        pass
    finally:
        bot.send_message(517561825, message.chat.username + ' write MESSAGE: ' + message.text)



@bot.callback_query_handler(func=lambda call: True)
def handler_call (call):
    try:
        lesson={
        '1':content.lesson_1.get,
        '2':content.lesson_2.get,
        '3':content.lesson_3.get,
        '4':content.lesson_4.get,
        '5':content.lesson_5.get,
        '6':content.lesson_6.get,
        '7':content.lesson_7.get,
        '8':content.lesson_8.get,
        }

#FUNCTIONAL

        if call.data == 'timetable':
            bot.send_message(call.message.chat.id, content.datatable)

# CONTENT ZONE



        elif call.data[:-3] == 'conspect':
            file_homeches = open(lesson[call.data[10]]('lesson'), 'rb')
            bot.send_document(call.message.chat.id, file_homeches)
        elif call.data[:-3] == 'homework':
            file_homeches = open(lesson[call.data[10]]('homework'), 'rb')
            bot.send_document(call.message.chat.id, file_homeches)
        elif call.data[:-3] == 'creativework':
            file_homeches = open(lesson[call.data[14]]('create_work'), 'rb')
            bot.send_document(call.message.chat.id, file_homeches)

#HAND OVER WORK

        elif call.data == 'hand_over_work': # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –î–ó|–ö–î–ó
            markup_handover = types.InlineKeyboardMarkup()
            handover_homework = types.InlineKeyboardButton("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data='handover_homework')
            handover_creativework = types.InlineKeyboardButton("–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data='handover_creativework')
            markup_handover.row(handover_homework, handover_creativework)
            bot.send_message(call.message.chat.id, "–ö–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–∞—Ç—å?", reply_markup=markup_handover)
        elif call.data == 'handover_homework':
            bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –≤ —á–∞—Ç...")
            user_config.hand_over.update({'handover': 'homework'})
        elif call.data == 'handover_creativework':
            bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –≤ —á–∞—Ç...")
            user_config.hand_over.update({'handover': 'creativework'})

# ADMIN ZONE

        elif call.data == 'admin_message':
            admin_markup_mail = types.InlineKeyboardMarkup()
            admin_message_see = types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data='admin_message_see')
            admin_message_saw = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='admin_message_saw')
            admin_markup_mail.row(admin_message_see, admin_message_saw)
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup = admin_markup_mail)
        elif call.data == 'admin_message_see':
            bot.send_message(call.message.chat.id, content.admin_sent_message)
        elif call.data == 'admin_message_saw':
            user_pull = ["392874912", "517561825", "166254027", "900799157", "962932095", "581487686", "446664973", "328643465"]
            for i in user_pull:
                bot.send_message(i, content.admin_sent_message)

        elif call.data == 'admin_users':
            db = sqlite3.connect('nelly_v-ass.db')
            cursor = db.cursor()
            cursor.execute('SELECT login FROM user')
            admin_access = cursor.fetchall()
            access = cursor.fetchone()
            db.commit()
            admin_markup_mail = types.InlineKeyboardMarkup()
            for i in range(len(admin_access)):
                name = str(admin_access[i][0])
                admin_access[i] = types.InlineKeyboardButton(name, callback_data = name)
                admin_markup_mail.row(admin_access[i])
            bot.send_message(call.message.chat.id, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup = admin_markup_mail)

#USERS ACCOUNT

        elif call.data in ('Emin_Pho', 'nelly_white', 'Kamila_Usmanova', 'heytanne', 'AnyaDD', 'yannnut', 'lowely_pony', 'Mr_Moony007', 'Nikpleskach'):
            user_config.hand_over.update({'key': call.data})
            user_account = types.InlineKeyboardMarkup()
            ho_les1 = types.InlineKeyboardButton("–£—Ä–æ–∫ 1", callback_data='ho_les1')
            ho_les2 = types.InlineKeyboardButton("–£—Ä–æ–∫ 2", callback_data='ho_les2')
            ho_les3 = types.InlineKeyboardButton("–£—Ä–æ–∫ 3", callback_data='ho_les3')
            ho_les4 = types.InlineKeyboardButton("–£—Ä–æ–∫ 4", callback_data='ho_les4')
            ho_les5 = types.InlineKeyboardButton("–£—Ä–æ–∫ 5", callback_data='ho_les5')
            ho_les6 = types.InlineKeyboardButton("–£—Ä–æ–∫ 6", callback_data='ho_les6')
            ho_les7 = types.InlineKeyboardButton("–£—Ä–æ–∫ 7", callback_data='ho_les7')
            ho_les8 = types.InlineKeyboardButton("–£—Ä–æ–∫ 8", callback_data='ho_les8')
            static = types.InlineKeyboardButton("–†–µ–π—Ç–∏–Ω–≥", callback_data='static' + str(call.data))
            user_account.row(ho_les1, ho_les2, ho_les3, ho_les4)
            user_account.row(ho_les5, ho_les6, ho_les7, ho_les8)
            user_account.row(static)
            bot.send_message(call.message.chat.id, '–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + call.data, reply_markup = user_account)
        elif call.data[:-1] == 'ho_les':
            bot.send_message(call.message.chat.id, '–ó–∞–≥—Ä—É–∂–∞—é –ö–î–ó...')
            part = content.folder + 'users/' + user_config.hand_over.get ('key') +  '/lesson_'+ call.data[6] + '/creativework/documents/'
            pr = os.listdir(path=part)
            for i in pr:
                if i != '.DS_Store':
                    photo = open(part+i, 'rb')
                    bot.send_photo(call.message.chat.id, photo)
            part = content.folder + 'users/' + user_config.hand_over.get ('key') +  '/lesson_' + call.data[6] + '/creativework/photos/'
            pr = os.listdir(path=part)
            for i in pr:
                if i != '.DS_Store':
                    photo = open(part+i, 'rb')
                    bot.send_photo(call.message.chat.id, photo)
            bot.send_message(call.message.chat.id, '–ö–î–ó –±–æ–ª—å—à–µ –Ω–µ—Ç')
            bot.send_message(call.message.chat.id, '–ó–∞–≥—Ä—É–∂–∞—é –î–ó...')
            part = content.folder + 'users/' + user_config.hand_over.get ('key') +  '/lesson_'+ call.data[6] + '/homework/documents/'
            pr = os.listdir(path=part)
            for i in pr:
                if i != '.DS_Store':
                    photo = open(part+i, 'rb')
                    bot.send_photo(call.message.chat.id, photo)
            part = content.folder + 'users/' + user_config.hand_over.get ('key') +  '/lesson_' + call.data[6] + '/homework/photos/'
            pr = os.listdir(path=part)
            for i in pr:
                if i != '.DS_Store':
                    photo = open(part+i, 'rb')
                    bot.send_photo(call.message.chat.id, photo)
            bot.send_message(call.message.chat.id, '–î–ó –±–æ–ª—å—à–µ –Ω–µ—Ç')



        elif call.data[:6] == 'static':
            x = 1

            while x <= 9 :
                for i in user_config.score:
                    user = user_config.score.get(str(i))
                    if user.get('place') == x:
                        bot.send_message(call.message.chat.id,  str(user.get('place')) + ' | ' + str(i) + ' : ' + str(user.get('point')) + ' points')
                x = x + 1
            bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏ –∫–æ–ª-–≤–æ –±–∞–ª–ª–æ–≤ –∏ —Ç–∏–ø (–¥–∑/–∫–¥–∑/—Ç–µ—Å—Ç)')













        elif call.data == 'bot_restart':
            bot.send_message(call.message.chat.id, '–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞. –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
        else:
            pass
    except Exception as warring:
        bot.send_message(517561825, call.message.chat.username + ' call EXCEPT handler_call: ' + str(warring))
    else:
        pass
    finally:
        bot.send_message(517561825, call.message.chat.username + ' CALLING: ' + call.data)



@bot.message_handler(content_types=[
'sticker', 'video', 'video_note', 'voice', 'location', 'contact', 'new_chat_members', 'left_chat_member',
'new_chat_title', 'new_chat_photo', 'delete_chat_photo', 'group_chat_created', 'supergroup_chat_created',
'channel_chat_created', 'migrate_to_chat_id', 'migrate_from_chat_id', 'pinned_message'
])
def handler_warring(message):
    try:
        bot.send_message(message.chat.id, "–û–®–ò–ë–ö–ê 601: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
    except Exception as warring:
        bot.send_message(517561825, message.chat.username + ' call EXCEPT handler_warring: ' + str(warring))
    else:
        pass
    finally:
        bot.send_message(517561825, message.chat.username + ' calling: ' + str(message))



bot.polling(none_stop=True, interval=0, timeout=6) #RUN
